import { runPreset } from "../runners/runPreset.js";
import { parseArgsPreset } from "./parseArgvPreset.js";
import { parseZodArgs } from "./parseZodArgs.js";
import { promptForPreset } from "./promptForPreset.js";
import { promptForPresetOptions } from "./promptForPresetOptions.js";
import { isTemplate } from "./utils.js";
export async function runCli(templateLabel, ...args) {
    const templateSource = /^[./\\]/.test(templateLabel)
        ? templateLabel
        : `create-${templateLabel}`;
    const templateModule = await tryImport(templateSource);
    if (templateModule instanceof Error) {
        throw new Error(`Could not import ${templateSource}.`, {
            cause: templateModule,
        });
    }
    if (!("default" in templateModule)) {
        throw new Error(`${templateSource} should have a default exported Template.`);
    }
    const template = templateModule.default;
    if (!isTemplate(template)) {
        throw new Error(`${templateSource}'s default export should be a Template.`);
    }
    console.log(`Let us ✨ create ✨ a repository for the ${templateSource} Template!`);
    const presetLabel = await promptForPreset(template.presets.map((preset) => preset.label), parseArgsPreset(args));
    const presetListing = template.presets.find((preset) => preset.label === presetLabel);
    if (!presetListing) {
        throw new Error(`${templateSource} should have a Preset with label ${presetLabel}.`);
    }
    const { preset } = presetListing;
    const parsedOptions = parseZodArgs(args, preset.base.options);
    await runPreset(preset, {
        // TODO: allow changing directory
        // https://github.com/JoshuaKGoldberg/create/issues/26 (or a follow-up)
        directory: ".",
        options: parsedOptions,
        // TODO: why is options `any` without the type annotation?
        optionsAugment: async (options) => promptForPresetOptions(preset.base.options, options),
    });
}
async function tryImport(source) {
    try {
        return (await import(source));
    }
    catch (error) {
        return error;
    }
}
//# sourceMappingURL=runCli.js.map