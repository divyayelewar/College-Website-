import { describe, expect, it, vi } from "vitest";
import { createRepositoryWithApi } from "./createRepositoryWithApi.js";
const mockCreateUsingTemplate = vi.fn();
const mockCreateInOrg = vi.fn();
const mockCreateForAuthenticatedUser = vi.fn();
const mockGetAuthenticated = vi.fn();
const createMockOctokit = () => ({
    rest: {
        repos: {
            createForAuthenticatedUser: mockCreateForAuthenticatedUser,
            createInOrg: mockCreateInOrg,
            createUsingTemplate: mockCreateUsingTemplate,
        },
        users: {
            getAuthenticated: mockGetAuthenticated,
        },
    },
});
const owner = "StubOwner";
const repository = "stub-repository";
const template = {
    owner: "JoshuaKGoldberg",
    repository: "create-typescript-app",
};
describe("createRepositoryWithApi", () => {
    it("creates using a template when a template is provided", async () => {
        await createRepositoryWithApi(createMockOctokit(), owner, repository, template);
        expect(mockCreateForAuthenticatedUser).not.toHaveBeenCalled();
        expect(mockCreateInOrg).not.toHaveBeenCalled();
        expect(mockCreateUsingTemplate).toHaveBeenCalledWith({
            name: repository,
            owner,
            template_owner: template.owner,
            template_repo: template.repository,
        });
    });
    it("creates under the user when the user is the owner", async () => {
        mockGetAuthenticated.mockResolvedValueOnce({
            data: {
                login: owner,
            },
        });
        await createRepositoryWithApi(createMockOctokit(), owner, repository);
        expect(mockCreateForAuthenticatedUser).toHaveBeenCalledWith({
            name: repository,
        });
        expect(mockCreateInOrg).not.toHaveBeenCalled();
        expect(mockCreateUsingTemplate).not.toHaveBeenCalled();
    });
    it("creates under an org when the user is not the owner", async () => {
        const login = "other-user";
        mockGetAuthenticated.mockResolvedValueOnce({ data: { login } });
        await createRepositoryWithApi(createMockOctokit(), owner, repository);
        expect(mockCreateForAuthenticatedUser).not.toHaveBeenCalled();
        expect(mockCreateInOrg).toHaveBeenCalledWith({
            name: repository,
            org: owner,
        });
        expect(mockCreateUsingTemplate).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=createRepositoryWithApi.test.js.map